import chromadb
from sentence_transformers import SentenceTransformer
from embedding import generer_embeddings_avec_metadatas
from scraping import lire_contrats_avec_metadatas

__import__('pysqlite3')
import sys
sys.modules['sqlite3'] = sys.modules.pop('pysqlite3')

# Fonction pour ins√©rer dans ChromaDB
def inserer_dans_chromadb(embeddings_data):
    """
    Ins√®re les donn√©es dans la base vectorielle chromaDB.

    Param√®tres:
        embeddings_data (dict): dictionnaire d'id qui prennent en valeur un dictionnaire de metadatas, documents et embeddings

    Sortie:
        Arr√™te la fonction si la collection existe d√©j√†.
        Sinon, ins√®re les donn√©es dans une nouvelle collection.
    """
    # Cr√©er ou se connecter √† une base ChromaDB existante
    chromadb.api.client.SharedSystemClient.clear_system_cache()
    client = chromadb.Client()

    # Nom de la collection
    collection_name = "contrats_collection"

    # V√©rifier si la collection existe d√©j√†
    existing_collections = [col.name for col in client.list_collections()]
    if collection_name in existing_collections:
        print(f"La collection '{collection_name}' existe d√©j√†. Aucun ajout effectu√©.")
        return  # Arr√™ter la fonction si la collection existe

    # Cr√©er une nouvelle collection
    collection = client.create_collection(name=collection_name)

    # Insertion des documents, embeddings et m√©tadonn√©es dans ChromaDB
    for doc_id, data in embeddings_data.items():
        collection.add(
            ids=[doc_id],                  # Liste des IDs
            embeddings=[data["embedding"]], # Liste des embeddings
            metadatas=[data["metadata"]],   # Liste des m√©tadonn√©es
            documents=[data["documents"]]  # Liste des documents (texte de la section)
        )

 


# Exemple d'utilisation

# üìÇ Remplace par ton chemin de r√©pertoire contenant les fichiers HTML
repertoire_html = "./documents"

# Lire les documents, m√©tadonn√©es, et ids
documents, metadatas, ids = lire_contrats_avec_metadatas(repertoire_html)

# üöÄ G√©n√©rer les embeddings
embeddings_contrats = generer_embeddings_avec_metadatas(documents, metadatas, ids)



print("Documents et embeddings ins√©r√©s dans ChromaDB avec succ√®s!")


def requete_chromadb(question, collection_name="contrats_collection", modele="all-MiniLM-L6-v2"):
    """
    Effectue une requ√™te sur la base de donn√©es et compare la similarit√© entre la question et les documents

    Param√®tres:
        question (str): question pos√© par l'utilisateur
        collection_name (str): par d√©faut le nom de la collection
        modele (): model d'embedding
    Sortie:
        Cr√©ation de la collection
    """
    # Cr√©er ou se connecter √† une base ChromaDB existante
    chromadb.api.client.SharedSystemClient.clear_system_cache()
    # üóÇ Insertion dans ChromaDB
    inserer_dans_chromadb(embeddings_contrats)
    client = chromadb.Client()

    # Charger la collection existante
    collection = client.get_collection(name=collection_name)

    # G√©n√©rer l'embedding de la question avec le mod√®le SentenceTransformer
    model = SentenceTransformer(modele)
    question_embedding = model.encode(question)

    # Effectuer la requ√™te en utilisant l'embedding de la question
    results = collection.query(
        query_embeddings=[question_embedding],  # Embedding de la question
        n_results=5  # Nombre de r√©sultats souhait√©s
    )
    
    return results
